<?php

use Drupal;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Menu\MenuTreeParameters;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function abb_preprocess_page(array &$variables)
{
  // Retrieve the logo URL from the theme settings.
  $logo_path = \Drupal::config('system.site')->get('logo.url');

  // Pass the logo URL to the Twig template.
  $variables['logo_url'] = $logo_path;
}
function abb_preprocess(&$variables, $hook)
{
  $route_name = \Drupal::routeMatch()->getRouteName();
  $request = \Drupal::request();
  $route_name = \Drupal::routeMatch()->getRouteName();

  $currentLanguageCode = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
  $currentLanguageCode = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();

  $variables['language_id'] = $currentLanguageCode;
  $variables['language_name'] = \Drupal::languageManager()->getCurrentLanguage()->getName();
  $variables['language_id'] = $currentLanguageCode;
  $variables['language_name'] = \Drupal::languageManager()->getCurrentLanguage()->getName();

  $variables['route_name'] = $route_name;

  // Load the config page entity.
  $storage = \Drupal::entityTypeManager()->getStorage('config_pages')->load('config_settings');

  // Retrieve fields from the config page entity.
  $facebookField = $storage->get('field_facebook')->first();
  $variables['facebook'] = !empty($facebookField) ? $facebookField->getUrl() : null;

  $linkedinField = $storage->get('field_linkedin')->first();
  $variables['linkedin'] = !empty($linkedinField) ? $linkedinField->getUrl() : null;

  $instagramField = $storage->get('field_instagram')->first();
  $variables['instagram'] = !empty($instagramField) ? $instagramField->getUrl() : null;

  $youtubeField = $storage->get('field_youtube')->first();
  $variables['youtube'] = !empty($youtubeField) ? $youtubeField->getUrl() : null;

  $fornetField = $storage->get('field_fornet')->first();
  $variables['fornet'] = !empty($fornetField) ? $fornetField->getUrl() : null;

  // Example code to retrieve the URL of the first image in the field_logo_footer_bottom field.
  $imageField = $storage->get('field_logo_footer_bottom')->first();
  $variables['logo'] = !empty($imageField) && !empty($imageField->entity) ? $imageField->entity->getFileUri() : null;

  // Retrieve the body content from field_body_footer.
  $bodyFooterField = $storage->get('field_body_footer')->first();
  $variables['body_footer'] = !empty($bodyFooterField) ? $bodyFooterField->value : null;


  // Get the logo variable.
  $logo = $variables['logo'];

  // Check if the logo variable is not empty.
  if (!empty($logo)) {
    // Transform the logo variable to the correct URL.
    $variables['logo_footer_bottom'] = \Drupal::service('file_url_generator')->generateAbsoluteString($logo);
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function abb_preprocess_menu(&$variables)
{
  // Check if there's a stored active menu item.
  $active_menu_item = \Drupal::service('request_stack')->getCurrentRequest()->query->get('active_menu_item');

  // Set the stored active menu item as active.
  if ($active_menu_item) {
    foreach ($variables['items'] as &$item) {
      if (isset($item['url']['#attributes']['class']) && in_array('is-active', $item['url']['#attributes']['class'])) {
        unset($item['url']['#attributes']['class'][array_search('is-active', $item['url']['#attributes']['class'])]);
      }
    }

    // Add the 'is-active' class to the active menu item.
    foreach ($variables['items'] as &$item) {
      if ($item['url']->toString() === $active_menu_item) {
        $item['url']['#attributes']['class'][] = 'is-active';
      }
    }
  }
}

function abb_form_search_block_form_alter(&$form, &$form_state, $form_id){
  $form['keys']['#attributes']['class'][] = 'form-text';
  $form['actions']["submit"]['#attributes']['class'] = ['button js-form-submit form-submit'];
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @hook: form
 * @suggestion: search_block_form
 * @result: loads template form--search_block_form.html.twig
 */
function abb_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  $form_id = $variables['element']['#form_id'];
  $suggestions[] = 'form__' . str_replace('-', '_', $form_id);
}

function abb_theme_suggestions_page_title_alter(array &$suggestions, array $variables){
  $node = \Drupal::routeMatch()->getParameter('node');
  if(!empty($node) && $node->getType() == 'page'){
    $suggestions[] = 'page_title__node_' . $node->getType();
  }
}


function abb_theme_suggestions_views_exposed_form_alter(array &$suggestions, array $variables)
{
  $suggestions[] = 'views_exposed_form__' . str_replace(
    ['views-exposed-form-', '-'],
    ['', '_'],
    $variables['form']['#id']
  );
}


function abb_preprocess_page_title(&$variables) {
  // Get the current node.
  $node = \Drupal::request()->attributes->get('node');
  // Check if the node is of type 'page'.
  if ($node && $node->getType() == 'page') {
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

    $node_id = $node->id();
    if ($node_id) {
      $menu_link = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $node_id));
    }

    if (is_array($menu_link) && count($menu_link)) {
      $menu_link = reset($menu_link);
      if ($menu_link->getParent()) {
        $parents = $menu_link_manager->getParentIds($menu_link->getParent());
        $parent = reset(array_reverse($parents));
        $title = $menu_link_manager->createInstance($parent)->getTitle();
        if($title){
          $variables['title'] = $title;
        }
      }
    }
  }
  if (\Drupal::routeMatch()->getRouteName() == 'view.videos.page_1') {
    // Get the taxonomy term name from the route parameters.
    $term_id = \Drupal::routeMatch()->getParameter('category');
    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
    $code_lang = $language_interface->getId();
    $term = Term::load($term_id);
    if($term->hasTranslation($code_lang)){
      $variables['title']["#markup"] = $term->getTranslation($code_lang)->getName();
    }
  }
}


function abb_preprocess_breadcrumb(array &$variables){
  if (\Drupal::routeMatch()->getRouteName() == 'view.videos.page_1') {
    // Get the taxonomy term name from the route parameters.
    $term_id = \Drupal::routeMatch()->getParameter('category');
    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
    $code_lang = $language_interface->getId();
    $term = Term::load($term_id);
    if($term->hasTranslation($code_lang)){
      $variables['breadcrumb'][3] = ['text' => $term->getTranslation($code_lang)->getName(), 'url' => ''];
    }
  }
}

function abb_preprocess_html(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name === 'view.videos.page_1') {
    $term_id = \Drupal::routeMatch()->getParameter('category');
    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
    $code_lang = $language_interface->getId();
    $term = Term::load($term_id);
    if($term->hasTranslation($code_lang)){
      $variables['head_title']['title'] = $term->getTranslation($code_lang)->getName();
    }
  }
}
